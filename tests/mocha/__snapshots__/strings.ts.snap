# eslint-snapshot-rule-tester format: v1


strings >> invalid >> 1 + "foo"
Code:
  1 | 1 + "foo"
    |     ^~~~~ [1]

Output:
  1 | 1 + foo

[1] Found a string. Use `foo` instead.
---


"strings >> invalid >> class Foo {\n    foo = \"foo\"\n    constructor() {\n        this.bar = \"bar\"\n    }\n}"
Code:
  1 | class Foo {
  2 |     foo = "foo"
    |           ^~~~~ [1]
  3 |     constructor() {
  4 |         this.bar = "bar"
    |                    ^~~~~ [2]
  5 |     }
  6 | }

Output:
  1 | class Foo {
  2 |     foo = foo
  3 |     constructor() {
  4 |         this.bar = foo
  5 |     }
  6 | }

[1] Found a string. Use `foo` instead.
[2] Found a string. Use `foo` instead.
---


strings >> invalid >> ["foo", "bar"].join("\n")
Code:
  1 | ["foo", "bar"].join("\n")
    |  ^~~~~  ^~~~~       ^~~~
    |  [1]    [2]         [3]

Output:
  1 | [foo, foo].join(foo)

[1] Found a string. Use `foo` instead.
[2] Found a string. Use `foo` instead.
[3] Found a string. Use `foo` instead.
---


strings >> invalid >> `foo ${a ? "bar" : "baz"} ${`_${""}_`}`
Code:
  1 | `foo ${a ? "bar" : "baz"} ${`_${""}_`}`
    | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [1]
    |            ^~~~~ [2]        ^~~~~~~~~ [4]
    |                    ^~~~~ [3]    ^~ [5]

Output:
  1 | `foo ${a ? foo : foo} ${`_${foo}_`}`

[1] Found a template string. Use `bar` instead.
    Suggestions:
      - Use something else instead.
        Output:
          1 | somethingElse
[2] Found a string. Use `foo` instead.
[3] Found a string. Use `foo` instead.
[4] Found a template string. Use `bar` instead.
    Suggestions:
      - Use something else instead.
        Output:
          1 | `foo ${a ? "bar" : "baz"} ${somethingElse}`
[5] Found a string. Use `foo` instead.
---


"strings >> invalid >> `\nfoo ${a ? \"bar\" : \"baz\"}\n${`_${\"\"}_`}\n` + \"1\"+\"2\""
Code:
  1 | `
    | ^\ [1]
  2 | foo ${a ? "bar" : "baz"}
    | ~~~~~~~~~~~~~~~~~~~~~~~~\ [1]
    |           ^~~~~ [2]
    |                   ^~~~~ [3]
  3 | ${`_${""}_`}
    | ~~~~~~~~~~~~\ [1]
    |   ^~~~~~~~~ [4]
    |       ^~ [5]
  4 | ` + "1"+"2"
    | ~ [1]   ^~~ [7]
    |     ^~~ [6]

Output:
  1 | `
  2 | foo ${a ? foo : foo}
  3 | ${`_${foo}_`}
  4 | ` + foo+foo

[1] Found a template string. Use `bar` instead.
    Suggestions:
      - Use something else instead.
        Output:
          1 | somethingElse + "1"+"2"
[2] Found a string. Use `foo` instead.
[3] Found a string. Use `foo` instead.
[4] Found a template string. Use `bar` instead.
    Suggestions:
      - Use something else instead.
        Output:
          1 | `
          2 | foo ${a ? "bar" : "baz"}
          3 | ${somethingElse}
          4 | ` + "1"+"2"
[5] Found a string. Use `foo` instead.
[6] Found a string. Use `foo` instead.
[7] Found a string. Use `foo` instead.
---


strings >> invalid >> `foo${1 + 2}`
Code:
  1 | `foo${1 + 2}`
    | ^~~~~~~~~~~~~ [1]

Output: unchanged

[1] Found a template string. Use `bar` instead.
    Suggestions:
      - Use something else instead.
        Output:
          1 | somethingElse
---
